---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nats-config
  namespace: nats
data:
  nats.conf: |
    pid_file: "/var/run/nats/nats.pid"
    http: 8222
    cluster {
      port: 6222
      routes [
        nats://nats-0.nats-mgmt.nats.svc.cluster.local:6222
        nats://nats-1.nats-mgmt.nats.svc.cluster.local:6222
        nats://nats-2.nats-mgmt.nats.svc.cluster.local:6222
      ]
      tls: {
        ca_file: /etc/nats-routes-tls-certs/ca.crt
        cert_file: /etc/nats-routes-tls-certs/tls.crt
        key_file: /etc/nats-routes-tls-certs/tls.key
      }
      connect_retries: 10
    }
    tls: {
    verify:   true
    ca_file: /etc/nats-server-tls-certs/ca.crt
    cert_file: /etc/nats-server-tls-certs/tls.crt
    key_file: /etc/nats-server-tls-certs/tls.key
    }
    leafnodes {
      port: 7422
      tls: {
        verify:   true
        ca_file: /etc/nats-server-tls-certs/ca.crt
        cert_file: /etc/nats-server-tls-certs/tls.crt
        key_file: /etc/nats-server-tls-certs/tls.key
      },
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nats
  namespace: nats
  labels:
    app: nats
spec:
  selector:
    app: nats
  type: NodePort
  ports:
  - name: client
    port: 4222
    nodePort: 31577
  - name: cluster
    port: 6222
  - name: monitor
    port: 8222
  - name: metrics
    port: 7777
  - name: leafnodes
    port: 7422
    nodePort: 32005
  - name: gateways
    port: 7522
---
apiVersion: v1
kind: Service
metadata:
  name: nats-mgmt
  namespace: nats
  labels:
    app: nats
spec:
  selector:
    app: nats
  clusterIP: None
  ports:
  - name: cluster
    port: 6222

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nats
  namespace: nats
spec:
  selector:
    matchLabels:
      app: nats
  serviceName: "nats-mgmt"
  replicas: 3
  template:
    metadata:
      labels:
        app: nats
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/edge
                operator: DoesNotExist
      volumes:
      - name: config-volume
        configMap:
          name: nats-config
      - name: pid
        emptyDir: {}
      - name: server-tls-certs
        secret:
          defaultMode: 420
          secretName: nats-server-tls
      - name: routes-tls-certs
        secret:
          defaultMode: 420
          secretName: nats-routes-tls
      - name: ca-tls
        secret:
          defaultMode: 420
          secretName: nats-ca
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 60
      containers:
      - name: nats
        image: registry.lenovo.com/base/nats:2.1.7-alpine3.11
        ports:
        - containerPort: 4222
          name: client
          #hostPort: 4222
        - containerPort: 7422
          name: leafnodes
          hostPort: 7422
        - containerPort: 6222
          name: cluster
        - containerPort: 8222
          name: monitor
        - containerPort: 7777
          name: metrics
        command:
         - "nats-server"
         - "--config"
         - "/etc/nats-config/nats.conf"
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
          - name: config-volume
            mountPath: /etc/nats-config
          - name: pid
            mountPath: /var/run/nats
          - mountPath: /etc/nats-server-tls-certs
            name: server-tls-certs
          - mountPath: /etc/nats-routes-tls-certs
            name: routes-tls-certs
          - mountPath: /etc/nats-client-tls-certs
            name: ca-tls
            readOnly: true
        livenessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
        lifecycle:
          preStop:
            exec:
            # Using the alpine based NATS image, we add an extra sleep that is
            # the same amount as the terminationGracePeriodSeconds to allow
            # the NATS Server to gracefully terminate the client connections.
            #
              command: ["/bin/sh", "-c", "/nats-server -sl=ldm=/var/run/nats/nats.pid && /bin/sleep 60"]

